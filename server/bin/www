#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");
const jwt = require("jsonwebtoken");
const { Conversation } = require("../db/models");
const { Op } = require("sequelize");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

/**
 * Attaching the socket server object to the express app object to allow emitting socket events in express middlewares
 */
app.socketIo = io;

// Helper function for verifying sender identity of socket events
const validateSenderId = (registeredId, receivedId) => {
  if (registeredId === receivedId) return true;
  console.log("Illegitimate socket event sent by userID: ", registeredId);
  return false;
}

// Helper function to get all convo IDs associated with a given user id; returns Array<string>
const getConvoIdsByUserId = async (userId) => {
  try {
    const conversations = await Conversation.findAll({
      where: {
        [Op.or]: {
          user1Id: userId,
          user2Id: userId,
        },
      }
    });
    return conversations.map(convo => String(convo.id));
  } catch (error) {
    console.log("Error while trying to get convoIds by UserId: ", error);
  }
};

io.on("connection", async (socket) => {
  let decodedToken;

  // Verifies if client socket presents a valid jwt
  if (socket.handshake.auth.token) {
    try {
      const token = socket.handshake.auth.token;
      decodedToken = jwt.verify(token, process.env.SESSION_SECRET);
    } catch (error) {
      console.log("Unauthenticated socket connection attempt: ", error);
      return socket.disconnect(true);
    }
  } else return socket.disconnect(true);

  // Adds the client socket to rooms corresponding to the user's conversations
  const convoIds = await getConvoIdsByUserId(decodedToken.id);
  socket.join(convoIds);

  socket.on("go-online", (id) => {
    if (!validateSenderId(decodedToken.id, id)) return;

    if (!onlineUsers.includes(id)) {
      onlineUsers.push(id);
    }
    // send the user who just went online to all conversation partners who are already online
    socket.to(convoIds).emit("add-online-user", id);
  });

  socket.on("new-message", async (data) => {
    if (!validateSenderId(decodedToken.id, data.message.senderId)) return;

    // checks if the message sender is a participant in the specified conversation, if not ignore the event
    const conversation = await Conversation.findByPk(data.message.conversationId);
    if (decodedToken.id != conversation.user1Id && decodedToken.id != conversation.user2Id) {
      console.log("Illegitimate socket event sent by userID: ", decodedToken.id);
      return;
    }

    socket.to(String(data.message.conversationId)).emit("new-message", {
      message: data.message,
      sender: data.sender,
    });
  });

  socket.on("logout", (id) => {
    if (!validateSenderId(decodedToken.id, id)) return;

    if (onlineUsers.includes(id)) {
      userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      socket.to(convoIds).emit("remove-offline-user", id);
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
